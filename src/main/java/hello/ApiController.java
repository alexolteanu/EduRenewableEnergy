package hello;

import hello.model.*;
import hello.service.TurbineServiceImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.websocket.server.PathParam;
import java.sql.Timestamp;
import java.util.List;

/*
 *  POST    http://localhost:8080/demo/add      body: name=CK400, latitude=43.87, longitude=28.38
 *  GET     http://localhost:8080/demo/all
 *  POST    http://localhost:8080/demo/data     body: windTurbineName=CK400, time=2019-01-01%2015:30:00.0, value=300
 *  GET     http://localhost:8080/demo/data
 */


@Controller    // This means that this class is a Controller
@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)
public class ApiController {

    @Autowired // This means to get the bean called windTurbineRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private WindTurbineRepository windTurbineRepository;

    @Autowired

    private PhotovoltaicRepository photovoltaicRepository;
    @Autowired
    private TurbineServiceImpl turbineServiceImpl;

    @Autowired
    private EnergyReadingRepository energyReadingRepository;

    public ApiController() {
    }

    @PostMapping(path = "/addWind") // Map ONLY GET Requests
    public @ResponseBody
    String addNewWindTurbine(@RequestParam Float latitude
            , @RequestParam Float longitude, @RequestParam String name) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        WindTurbine n = new WindTurbine(latitude, longitude, name);
        windTurbineRepository.save(n);
        return "SavedWind";
    }

    @PostMapping(path = "/addVoltaic") // Map ONLY POST Requests
    public @ResponseBody
    String addNewPhotovoltaic(@RequestParam Float latitude
            , @RequestParam Float longitude, @RequestParam String name) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Photovoltaic n = new Photovoltaic(latitude, longitude, name);
        photovoltaicRepository.save(n);
        return "Saved Voltaic";
    }

    @GetMapping(path = "/allWind")
    public @ResponseBody
    Iterable<WindTurbine> getAllWindTurbines() {
        // This returns a JSON or XML with the wind turbines
        return windTurbineRepository.findAll();
    }

    @GetMapping(path = "/allVoltaic")
    public @ResponseBody
    Iterable<Photovoltaic> getAllPhotovoltaics() {
        // This returns a JSON or XML with the wind turbines
        return photovoltaicRepository.findAll();
    }

    @GetMapping("/test/{id}/")
    public ResponseEntity<String> testMethod(@PathParam("id") String id,
                                             @RequestParam("name") String name,
                                             @RequestParam Timestamp time) {

        WindTurbine windTurbine = windTurbineRepository.findAll().iterator().next();
        EnergyReading energyReading = energyReadingRepository.findByWindTurbineAndTime(windTurbine, time).get(0);
        String result = this.turbineServiceImpl.combine(windTurbine, energyReading);

        if (windTurbine != null) {
            return new ResponseEntity<>(result, HttpStatus.OK);
        } else {
            return new ResponseEntity<>("", HttpStatus.BAD_REQUEST);
        }
    }

    @PostMapping(path = "/dataWind") // Map ONLY GET Requests
    public @ResponseBody
    String addNewEnergyReadingWind(@RequestParam String windTurbineName
            , @RequestParam Float value, @RequestParam Timestamp time) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        List<WindTurbine> windTurbineList = windTurbineRepository.findByName(windTurbineName);
        if (windTurbineList.isEmpty())
            return "WindTurbine with name " + windTurbineName + " could not be found";
        WindTurbine windTurbine = windTurbineList.get(0);

        EnergyReading newEnergyReading = new EnergyReading(windTurbine, time, value);
        // "manually" deciding whether to save or update
        // but also take a look at the saveOrUpdate in hibernate and unsaved-value checks
        List<EnergyReading> energyReadings = energyReadingRepository.findByWindTurbineAndTime(windTurbine, time);
        if (energyReadings.isEmpty()) {
            energyReadingRepository.save(newEnergyReading);
        } else {
            energyReadings.get(0).setValue(value);
            energyReadingRepository.save(energyReadings.get(0));
        }

        return "SavedWind";
    }

    @PostMapping(path = "/dataVoltaic") // Map ONLY GET Requests
    public @ResponseBody
    String addNewEnergyReadingPhotovoltaic(@RequestParam String photovoltaicName
            , @RequestParam Float value, @RequestParam Timestamp time) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        List<Photovoltaic> photoVoltaicsList = photovoltaicRepository.findByName(photovoltaicName);
        if (photoVoltaicsList.isEmpty())
            return "PhotoVoltaic with name " + photovoltaicName + " could not be found";
        Photovoltaic photovoltaic = photoVoltaicsList.get(0);

        EnergyReading newEnergyReading = new EnergyReading(photovoltaic, time, value);
        // "manually" deciding whether to save or update
        // but also take a look at the saveOrUpdate in hibernate and unsaved-value checks
        List<EnergyReading> energyReadings = energyReadingRepository.findByPhotovoltaicAndTime(photovoltaic, time);
        if (energyReadings.isEmpty()) {
            energyReadingRepository.save(newEnergyReading);
        } else {
            energyReadings.get(0).setValue(value);
            energyReadingRepository.save(energyReadings.get(0));
        }

        return "SavedPhotovoltaic";
    }

    @GetMapping(path = "/allWindData")
    public @ResponseBody Iterable<EnergyReading> getAllDataWind() {
        // This returns a JSON or XML with the energy readings
        return energyReadingRepository.findAll();
    }

    @GetMapping(path = "/allVoltaicsData")
    public @ResponseBody Iterable<EnergyReading> getAllDataVoltaic() {
        // This returns a JSON or XML with the energy readings
        return energyReadingRepository.findAll();
    }
}